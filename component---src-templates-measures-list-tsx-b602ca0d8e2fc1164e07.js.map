{"version":3,"sources":["webpack:///./src/components/time/time.tsx","webpack:///./src/components/schema/index.tsx","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/components/list-card/measure-list-card.module.scss","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/list-card/measure-list-card.tsx","webpack:///./src/templates/measures/list.tsx"],"names":["datetime","displayTime","prefix","suffix","dateConfig","year","month","day","hour","minute","timeZone","dateTime","Date","toLocaleString","children","className","styles","headline","getBreadcrumbClasses","variant","classNames","classes","items","getItemClasses","index","aria-label","key","item","isNavItem","to","title","module","exports","description","link","area","validFrom","validTo","measureListCardDetail","I18n","buttonWrapper","text","query","data","pageContext","measureType","measures","measure","collator","Intl","a","b","pagePath","slug","langCode","isBlogPost","isBlogList","breadcrumbItems","url","m","r"],"mappings":"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","file":"component---src-templates-measures-list-tsx-b602ca0d8e2fc1164e07.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  datetime: string;\n  displayTime?: boolean;\n  prefix?: string;\n  suffix?: string;\n}\n\nconst Time: React.FC<Props> = ({\n  datetime,\n  displayTime,\n  prefix,\n  suffix = ' ',\n}) => {\n  const dateConfig = {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: displayTime ? '2-digit' : undefined,\n    minute: displayTime ? '2-digit' : undefined,\n    timeZone: 'Europe/Prague',\n  };\n  return (\n    <time dateTime={datetime}>\n      {prefix}\n      {new Date(datetime).toLocaleString('cs-CZ', dateConfig)}\n      {suffix}\n    </time>\n  );\n};\n\nexport default Time;\n","export { default } from './schema';\n","import React from 'react';\n\nimport styles from './headline.module.scss';\n\nconst Headline: React.FC = ({ children }) => {\n  return <h1 className={styles.headline}>{children}</h1>;\n};\n\nexport default Headline;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  title={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"headline-module--headline--2EZlD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"measure-list-card-module--listItem--2NERh\",\"buttonWrapper\":\"measure-list-card-module--buttonWrapper--3V2sV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};","import React from 'react';\nimport Button from '@/components/button';\nimport Link from '@/components/link';\nimport I18n from '@/components/i18n';\nimport Time from '@/components/time';\nimport styles from './measure-list-card.module.scss';\nimport classNames from 'classnames';\n\ninterface IProps {\n  title: string;\n  link: string;\n  description: string;\n  area: string;\n  validFrom: string;\n  validTo: string;\n}\n\nconst MeasureListCard: React.FC<IProps> = ({\n  title,\n  description,\n  link,\n  area,\n  validFrom,\n  validTo,\n}) => {\n  return (\n    <Link\n      to={link}\n      className={classNames(\n        'card p-2 mb-2 text-decoration-none',\n        styles.listItem,\n      )}\n    >\n      {/* TODO: Add icon */}\n      <h2 className=\"font-weight-medium mb-1\">{title}</h2>\n      <p className=\"mt-0 color-gray\">{description}</p>\n      <div className=\"d-flex justify-content-between align-items-end\">\n        <div>\n          <div className={styles.measureListCardDetail}>\n            {I18n('applies_for')} {area}\n          </div>\n          <div className={styles.measureListCardDetail}>\n            {validFrom && (\n              <Time\n                displayTime\n                datetime={validFrom}\n                prefix={`${I18n('from')} `}\n              />\n            )}\n            {validTo && (\n              <Time displayTime datetime={validTo} prefix={`${I18n('to')} `} />\n            )}\n          </div>\n        </div>\n        <div className={styles.buttonWrapper}>\n          <Button text={I18n('detail')} variant=\"outline\" />\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default MeasureListCard;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IQuery, ISitePageContext } from '@graphql-types';\n\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport Container from '@/components/container';\nimport Headline from '@/components/headline';\nimport Layout from '@/layouts/default-layout';\nimport Breadcrumb from '@/components/breadcrumb';\nimport I18n from '@/components/i18n';\nimport MeasureListCard from '@/components/list-card/measure-list-card';\nimport SchemaComp from '@/components/schema';\n\ninterface IProps {\n  data: IQuery;\n  pageContext: ISitePageContext;\n}\n// todo add meta description\nconst Home: React.FC<IProps> = ({ data, pageContext }) => {\n  const { measureType } = data;\n  const measures = measureType.relationships?.measure || [];\n\n  const collator = new Intl.Collator([pageContext.langCode]);\n  measures.sort((a, b) => collator.compare(a.title, b.title));\n\n  return (\n    <Layout pageContext={pageContext}>\n      <Seo\n        title={measureType.name}\n        description={I18n('current_measures_overview_meta')}\n        pagePath={pageContext.slug}\n      />\n      <SchemaComp\n        langCode={pageContext.langCode}\n        isBlogPost={false}\n        isBlogList\n        title={measureType.name}\n        description={I18n('current_measures_overview_meta')}\n        breadcrumbItems={[\n          { title: I18n('home'), url: '/' },\n          { title: I18n('current_measures'), url: I18n('slug_measures') },\n          measureType.name,\n        ]}\n      />\n      <Container>\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[\n              { title: I18n('home'), url: '/' },\n              { title: I18n('current_measures'), url: I18n('slug_measures') },\n              measureType.name,\n            ]}\n            variant=\"inverse\"\n          />\n        </div>\n        <div className=\"mt-3\">\n          <Headline>{measureType.name}</Headline>\n        </div>\n        <div>\n          {measures.map((m) => (\n            <MeasureListCard\n              key={`taxonomyTermMeasureType-list-item-${m.id}`}\n              title={m.title}\n              description={m.norm}\n              link={m.path?.alias}\n              validFrom={m.valid_from}\n              validTo={m.valid_to}\n              area={m.relationships?.region?.map((r) => r.name).join(' ,')}\n            />\n          ))}\n        </div>\n      </Container>\n    </Layout>\n  );\n};\nexport default Home;\n\nexport const query = graphql`\n  query($slug: String!) {\n    measureType(path: { alias: { eq: $slug } }) {\n      name\n      relationships {\n        measure {\n          valid_from\n          valid_to\n          id\n          norm\n          title\n          relationships {\n            region {\n              name\n            }\n          }\n          path {\n            alias\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}