{"version":3,"sources":["webpack:///./src/components/button/variants.module.scss","webpack:///./src/components/time/time.tsx","webpack:///./src/components/schema/index.tsx","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/list-card/measure-list-card.tsx","webpack:///./src/templates/measures/list.tsx","webpack:///./src/components/button/button.tsx"],"names":["module","exports","datetime","prefix","suffix","dateTime","Date","toLocaleString","year","month","day","hour","minute","timeZone","children","className","styles","headline","getBreadcrumbClasses","variant","classNames","classes","items","getItemClasses","index","aria-label","key","item","isNavItem","to","label","title","description","link","area","validFrom","validTo","measureListCardDetail","I18n","text","query","data","pageContext","taxonomyTermMeasureType","pagePath","slug","url","langCode","isBlogPost","m","r","getClass","btn","onClick","href","disabled","icon","linkTitle","type","dataTestId"],"mappings":"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","file":"component---src-templates-measures-list-tsx-7df7f830c41a802de894.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn-small-black\":\"variants-module--btn-small-black--398fP\",\"btnSmallBlack\":\"variants-module--btn-small-black--398fP\"};","import React from 'react';\n\ninterface Props {\n  datetime: string;\n  prefix?: string;\n  suffix?: string;\n}\n\nconst Time: React.FC<Props> = ({ datetime, prefix, suffix = ' ' }) => {\n  return (\n    <time dateTime={datetime}>\n      {prefix}\n      {new Date(datetime).toLocaleString('cs-CZ', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        timeZone: 'Europe/Prague',\n      })}\n      {suffix}\n    </time>\n  );\n};\n\nexport default Time;\n","export { default } from './schema';\n","import React from 'react';\n\nimport styles from './headline.module.scss';\n\nconst Headline: React.FC = ({ children }) => {\n  return <h1 className={styles.headline}>{children}</h1>;\n};\n\nexport default Headline;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  label={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"headline-module--headline--2EZlD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};","import React from 'react';\nimport Button from '@/components/button';\nimport Link from '@/components/link';\nimport I18n from '@/components/i18n';\nimport Time from '@/components/time';\nimport styles from './measure-list-card.module.scss';\n\ninterface IProps {\n  title: string;\n  link: string;\n  description: string;\n  area: string;\n  validFrom: string;\n  validTo: string;\n}\n\nconst MeasureListCard: React.FC<IProps> = ({\n  title,\n  description,\n  link,\n  area,\n  validFrom,\n  validTo,\n}) => {\n  return (\n    <Link to={link} className=\"card p-2 mb-2 text-decoration-none\">\n      {/* TODO: Add icon */}\n      <h2 className=\"font-weight-medium mb-1\">{title}</h2>\n      <p className=\"mt-0 color-gray\">{description}</p>\n      <div className=\"d-flex justify-content-between align-items-end\">\n        <div>\n          <div className={styles.measureListCardDetail}>\n            {I18n('applies_for')} {area}\n          </div>\n          <div className={styles.measureListCardDetail}>\n            {validFrom && (\n              <Time datetime={validFrom} prefix={`${I18n('from')} `} />\n            )}\n            {validTo && <Time datetime={validTo} prefix={`${I18n('to')} `} />}\n          </div>\n        </div>\n        <div>\n          <Button text={I18n('detail')} variant=\"outline\" />\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default MeasureListCard;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IQuery } from 'graphql-types';\n\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport Container from '@/components/container';\nimport Headline from '@/components/headline';\nimport Layout from '@/layouts/default-layout';\nimport Breadcrumb from '@/components/breadcrumb';\nimport I18n from '@/components/i18n';\nimport MeasureListCard from '@/components/list-card/measure-list-card';\nimport SchemaComp from '@/components/schema';\n\ninterface IProps {\n  data: IQuery;\n}\n// todo add meta description\nconst Home: React.FC<IProps> = ({ data, pageContext }) => {\n  const { taxonomyTermMeasureType } = data;\n  return (\n    <Layout>\n      <Seo\n        title={taxonomyTermMeasureType.name}\n        description={I18n('current_measures_overview_meta')}\n        pagePath={pageContext.slug}\n      />\n      <SchemaComp\n        url={'https://covid.gov.cz' + pageContext.slug}\n        langCode={pageContext.langCode}\n        isBlogPost={false}\n        title={taxonomyTermMeasureType.name}\n        description={I18n('current_measures_overview_meta')}\n      />\n      <Container>\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[\n              { title: I18n('home'), url: '/' },\n              { title: I18n('current_measures'), url: I18n('slug_measures') },\n              taxonomyTermMeasureType.name,\n            ]}\n            variant=\"inverse\"\n          />\n        </div>\n        <div className=\"mt-3\">\n          <Headline>{taxonomyTermMeasureType.name}</Headline>\n        </div>\n        <div>\n          {taxonomyTermMeasureType.relationships?.measure?.map((m) => (\n            <MeasureListCard\n              key={`taxonomyTermMeasureType-list-item-${m.id}`}\n              title={m.title}\n              description={m.norm}\n              link={m.path?.alias}\n              validFrom={m.valid_from}\n              validTo={m.valid_to}\n              area={m.relationships?.region?.map((r) => r.name).join(' ,')}\n            />\n          ))}\n        </div>\n      </Container>\n    </Layout>\n  );\n};\nexport default Home;\n\nexport const query = graphql`\n  query($slug: String!) {\n    taxonomyTermMeasureType(path: { alias: { eq: $slug } }) {\n      name\n      relationships {\n        measure {\n          valid_from\n          valid_to\n          id\n          norm\n          title\n          relationships {\n            region {\n              name\n            }\n          }\n          path {\n            alias\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './variants.module.scss';\n\nimport Link from '@/components/link';\n\nconst getClass = (variant: ButtonVariant, additionalClass?: string): string => {\n  return classNames(\n    { btn: variant !== 'small-black' },\n    { 'btn-primary': variant === 'contained' },\n    { 'btn-outline-primary': variant === 'outline' },\n    { 'btn-outline-dark': variant === 'outline-black' },\n    { 'btn-outline-yellow': variant === 'outline-yellow' },\n    { 'btn-yellow': variant === 'yellow' },\n    { 'text-black': variant === 'outline-black' },\n    { 'btn-secondary': variant === 'secondary' },\n    { [styles.btnSmallBlack]: variant === 'small-black' },\n    { [additionalClass]: additionalClass },\n  );\n};\n\nexport type ButtonVariant =\n  | 'contained'\n  | 'outline'\n  | 'yellow'\n  | 'secondary'\n  | 'outline-black'\n  | 'outline-yellow'\n  | 'small-black';\n\ninterface IProps {\n  text?: string;\n  variant?: ButtonVariant;\n  className?: string;\n  onClick?: () => void;\n  href?: string;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  linkTitle?: string;\n}\n\nconst Button: React.FC<IProps> = ({\n  variant,\n  onClick,\n  text,\n  href = '',\n  className,\n  disabled = false,\n  icon,\n  linkTitle = '',\n}) => {\n  if (href !== '' && !disabled) {\n    return (\n      <Link to={href} label={linkTitle} dataTestId=\"button-link\">\n        <button\n          type=\"button\"\n          className={getClass(variant, className)}\n          onClick={onClick || null}\n          disabled={disabled}\n        >\n          {text}\n          {icon}\n        </button>\n      </Link>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={getClass(variant, className)}\n      onClick={onClick || null}\n      disabled={disabled}\n    >\n      {text}\n      {icon}\n    </button>\n  );\n};\n\nexport default Button;\n"],"sourceRoot":""}