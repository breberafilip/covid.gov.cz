{"version":3,"sources":["webpack:///./src/components/button/variants.module.scss","webpack:///./src/pages/404.module.scss","webpack:///./src/pages/404.tsx","webpack:///./src/components/button/button.tsx"],"names":["module","exports","pageContext","title","className","alignItems","justify","variant","text","href","props","restCommonProps","composedClassName","classNames","btn","styles","getButtonClassName","hasHref","icon","rest","dataTestId","to","type"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,kBAAkB,0CAA0C,cAAgB,4C,qBCA9FD,EAAOC,QAAU,CAAC,QAAQ,4BAA4B,KAAO,8B,oCCD7D,4FAkCA,UArBuC,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,YACxC,OACE,uBAAQA,YAAaA,GACnB,4BAAQC,MAAM,kCACd,uBACEC,UAAW,iCADb,OAEEC,WAFF,SAGEC,QAAQ,UAER,wBAAIF,UAAU,wCALhB,uCAQE,wBAAIA,UAAU,wCARhB,sBAWE,uBAAQG,QAAR,YAA4BC,KAA5B,yBAA0DC,KAAK,U,+JCsDvE,EA9ByB,SAACC,GAAqC,IACrDN,EAA2CM,EADU,UAC1CH,EAAgCG,EADU,QAC9BC,EAD8B,uCAGvDC,EAAoBC,IAxCD,SAACN,GAAoC,MAC9D,OAAOM,IACL,CAAEC,IAAiB,gBAAZP,GACP,CAAE,cAA2B,cAAZA,GACjB,CAAE,sBAAmC,YAAZA,GACzB,CAAE,mBAAgC,kBAAZA,GACtB,CAAE,qBAAkC,mBAAZA,GACxB,CAAE,aAA0B,WAAZA,GAChB,CAAE,aAA0B,kBAAZA,GAChB,CAAE,gBAA6B,cAAZA,KARJ,MASZQ,IATY,+BASWR,EAT5B,IAuCqCS,CAAD,GAApC,GAEA,GARc,SAACN,GAAD,MACd,SADc,EAQVO,CAAJ,GAA8B,KACpBR,EAA8BE,EADV,KACdH,EAAwBG,EADV,KACRO,EAAkBP,EADV,KACCQ,EADD,sCAE5B,OACE,qCACEC,WADF,cAEEC,GAFF,EAGEjB,UAAWQ,GAHb,KADF,GAP2D,QAoBrDJ,EApBqD,OAoB/CU,EApB+C,OAoBtCC,EApBsC,+BAsB7D,OACE,0CAAQG,KAAR,SAAsBlB,UAAWQ,GAAjC,KADF","file":"component---src-pages-404-tsx-0fdbb823482c5ea12934.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn-small-black\":\"variants-module--btn-small-black--398fP\",\"btnSmallBlack\":\"variants-module--btn-small-black--398fP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"vh-90\":\"_404-module--vh-90--3LGOK\",\"vh90\":\"_404-module--vh-90--3LGOK\"};","import Button from '@/components/button';\nimport Row from '@/components/row';\nimport React from 'react';\nimport { vh90 } from './404.module.scss';\nimport Layout from '@/layouts/default-layout';\nimport { Helmet } from 'react-helmet';\nimport { ISitePageContext } from '@graphql-types';\n\ninterface IProps {\n  pageContext: ISitePageContext;\n}\n\n// todo: add localized title for button\nconst PageNotFound: React.FC<IProps> = ({ pageContext }) => {\n  return (\n    <Layout pageContext={pageContext}>\n      <Helmet title=\"Page not found | COVID PORTAL\" />\n      <Row\n        className={'bg-light flex-column p-5 mx-0 ' + vh90}\n        alignItems=\"center\"\n        justify=\"center\"\n      >\n        <h1 className=\"h2 font-weight-bold text-center mb-3\">\n          Na této stránce bohužel nic není :(\n        </h1>\n        <h2 className=\"h3 font-weight-bold text-center mb-3\">\n          Page Not Found 404\n        </h2>\n        <Button variant=\"contained\" text=\"Zpět na úvodní stránku\" href=\"/\" />\n      </Row>\n    </Layout>\n  );\n};\n\nexport default PageNotFound;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './variants.module.scss';\n\nimport Link from '@/components/link';\n\nexport type ButtonVariant =\n  | 'contained'\n  | 'outline'\n  | 'yellow'\n  | 'secondary'\n  | 'outline-black'\n  | 'outline-yellow'\n  | 'small-black';\n\nconst getButtonClassName = (variant?: ButtonVariant): string => {\n  return classNames(\n    { btn: variant !== 'small-black' },\n    { 'btn-primary': variant === 'contained' },\n    { 'btn-outline-primary': variant === 'outline' },\n    { 'btn-outline-dark': variant === 'outline-black' },\n    { 'btn-outline-yellow': variant === 'outline-yellow' },\n    { 'btn-yellow': variant === 'yellow' },\n    { 'text-black': variant === 'outline-black' },\n    { 'btn-secondary': variant === 'secondary' },\n    { [styles.btnSmallBlack]: variant === 'small-black' },\n  );\n};\n\ntype IButtonBase = {\n  text?: string;\n  variant?: ButtonVariant;\n  className?: string;\n  icon?: React.ReactNode;\n};\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\n  IButtonBase & { href?: undefined };\n\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> &\n  IButtonBase & { href: string };\n\n// Input/output options\ntype Overload = {\n  (props: ButtonProps): JSX.Element;\n  (props: AnchorProps): JSX.Element;\n};\n\n// Guard to check if href exists in props\nconst hasHref = (props: ButtonProps | AnchorProps): props is AnchorProps =>\n  'href' in props;\n\nconst Button: Overload = (props: ButtonProps | AnchorProps) => {\n  const { className, variant, ...restCommonProps } = props;\n\n  const composedClassName = classNames(getButtonClassName(variant), className);\n\n  if (hasHref(restCommonProps)) {\n    const { href, text, icon, ...rest } = restCommonProps;\n    return (\n      <Link\n        dataTestId=\"button-link\"\n        to={href}\n        className={composedClassName}\n        {...rest}\n      >\n        {text}\n        {icon}\n      </Link>\n    );\n  }\n\n  const { text, icon, ...rest } = restCommonProps as ButtonProps;\n\n  return (\n    <button type=\"button\" className={composedClassName} {...rest}>\n      {text}\n      {icon}\n    </button>\n  );\n};\n\nexport default Button;\n"],"sourceRoot":""}