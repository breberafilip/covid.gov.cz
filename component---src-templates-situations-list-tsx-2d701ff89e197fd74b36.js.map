{"version":3,"sources":["webpack:///./src/components/category-item-list/category-item-list.module.scss","webpack:///./src/components/button/variants.module.scss","webpack:///./src/layouts/desktop-left-menu-layout.tsx","webpack:///./src/components/schema/index.tsx","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/list-card/list-card.tsx","webpack:///./src/templates/situations/list.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/layouts/desktop-left-menu-layout.module.scss","webpack:///./src/components/list-card/measure-list-card.module.scss","webpack:///./src/components/category-item/category-item.tsx","webpack:///./node_modules/@material-ui/icons/esm/KeyboardArrowLeft.js","webpack:///./src/components/category-item-list/category-item-list.tsx","webpack:///./src/components/category-item-list/measure-area-list.tsx","webpack:///./src/components/category-item-list/situation-area-list.tsx","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/category-item/category-item.module.scss","webpack:///./src/components/button/button.tsx"],"names":["module","exports","menu","children","hideMenuOnMobile","className","classNames","styles","main","iconCode","code","title","description","link","t","useTranslation","to","buttonWrapper","text","variant","query","data","pageContext","area","situations","collator","Intl","a","b","pagePath","langCode","isBlogPost","isBlogList","breadcrumbItems","url","items","nodes","id","meta_description","path","key","alias","getBreadcrumbClasses","classes","getItemClasses","index","aria-label","item","isNavItem","name","isActive","categoryItemTitle","chevron","style","fontSize","createSvgIcon","createElement","d","titleIconCode","linkBack","currentLanguage","useCurrentLanguage","styledTitle","i","acc","wrapper","header","icon","dangerouslySetInnerHTML","__html","slug","location","useLocation","listItems","relationships","pathname","props","restCommonProps","composedClassName","btn","getButtonClassName","hasHref","href","rest","dataTestId","type"],"mappings":"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","file":"component---src-templates-situations-list-tsx-2d701ff89e197fd74b36.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"category-item-list-module--wrapper--2l6te\",\"header\":\"category-item-list-module--header--32CZs\",\"icon\":\"category-item-list-module--icon--3Y5rx\",\"chevron\":\"category-item-list-module--chevron--cmaV2\",\"linkBack\":\"category-item-list-module--linkBack--K051_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn-small-black\":\"variants-module--btn-small-black--398fP\",\"btnSmallBlack\":\"variants-module--btn-small-black--398fP\"};","import React from 'react';\nimport classNames from 'classnames';\n\nimport styles from './desktop-left-menu-layout.module.scss';\n\ninterface IProps {\n  menu: React.ReactNode;\n  hideMenuOnMobile?: boolean;\n}\n\nconst DesktopLeftMenuLayout: React.FC<IProps> = ({\n  menu,\n  children,\n  hideMenuOnMobile,\n}) => {\n  return (\n    <div className={classNames(styles.wrapper, 'mt-3')}>\n      <nav className={classNames({ [styles.hideOnMobile]: hideMenuOnMobile })}>\n        {menu}\n      </nav>\n      <div className={styles.main}>{children}</div>\n    </div>\n  );\n};\n\nexport default DesktopLeftMenuLayout;\n","export { default } from './schema';\n","import classNames from 'classnames';\nimport React from 'react';\nimport ContentIcon from '../content-icon';\n\nimport styles from './headline.module.scss';\n\ninterface IProps {\n  iconCode?: string;\n  className?: string;\n}\n\nconst Headline: React.FC<IProps> = ({ iconCode, className, children }) => {\n  return (\n    <div className={classNames(className, styles.headlineWrapper)}>\n      <h1 className={classNames(styles.headline)}>\n        {iconCode && (\n          <ContentIcon className={styles.headlineIcon} code={iconCode} />\n        )}\n        <span>{children}</span>\n      </h1>\n      <hr />\n    </div>\n  );\n};\n\nexport default Headline;\n","import React from 'react';\nimport Button from '@/components/button';\nimport Link from '@/components/link';\nimport styles from './measure-list-card.module.scss';\nimport classNames from 'classnames';\nimport { useTranslation } from '@/components/i18n';\n\ninterface IProps {\n  title: string;\n  link: string;\n  description: string;\n}\n\nconst ListCard: React.FC<IProps> = ({ title, description, link }) => {\n  const { t } = useTranslation();\n  return (\n    <Link\n      to={link}\n      className={classNames('card text-decoration-none', styles.listItem)}\n    >\n      <h2 className=\"font-weight-medium mb-1\">{title}</h2>\n      <div className=\"d-flex justify-content-between align-items-end\">\n        <p className=\"m-0 color-gray\">{description}</p>\n        <div className={styles.buttonWrapper}>\n          <Button text={t('detail')} variant=\"outline\" />\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default ListCard;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { ISituationsListQuery, ISitePageContext } from 'graphql-types';\nimport Container from '@/components/container';\n\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport Headline from '@/components/headline';\nimport ListCard from '@/components/list-card';\nimport Layout from '@/layouts/default-layout';\nimport Breadcrumb from '@/components/breadcrumb';\nimport SchemaComp from '@/components/schema';\nimport { SituationAreaList } from '@/components/category-item-list';\nimport DesktopLeftMenuLayout from '@/layouts/desktop-left-menu-layout';\nimport { useTranslation } from '@/components/i18n';\n\ninterface IProps {\n  data: ISituationsListQuery;\n  pageContext: ISitePageContext;\n}\n\nconst SituationList: React.FC<IProps> = ({ data, pageContext }) => {\n  const { t } = useTranslation();\n  const { area } = data;\n  const situations = area.relationships?.situation || [];\n\n  const collator = new Intl.Collator([pageContext.langCode]);\n  situations.sort((a, b) => collator.compare(a.title, b.title));\n\n  return (\n    <Layout pageContext={pageContext}>\n      <Seo\n        title={area.name}\n        description={t('situations_overview_meta')}\n        pagePath=\"/situations\"\n      />\n      <SchemaComp\n        langCode={pageContext.langCode}\n        isBlogPost={false}\n        isBlogList\n        title={area.name}\n        description={t('situations_overview_meta')}\n        breadcrumbItems={[\n          { title: t('home'), url: '/' },\n          {\n            title: t('life_situations'),\n            url: t('slug_situations'),\n          },\n          area.name,\n        ]}\n      />\n      <Container>\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[\n              { title: t('home'), url: '/' },\n              {\n                title: t('life_situations'),\n                url: t('slug_situations'),\n              },\n              area.name,\n            ]}\n            variant=\"inverse\"\n          />\n        </div>\n        <DesktopLeftMenuLayout\n          menu={<SituationAreaList data={data.allSituationAreas.nodes} />}\n          hideMenuOnMobile\n        >\n          <Headline iconCode={data.area?.relationships?.icon?.code}>\n            {area.name}\n          </Headline>\n          {situations.map(({ id, title, meta_description, path }) => {\n            return (\n              <ListCard\n                title={title}\n                description={meta_description}\n                key={`area-list-item-${id}`}\n                link={path?.alias}\n              />\n            );\n          })}\n        </DesktopLeftMenuLayout>\n      </Container>\n    </Layout>\n  );\n};\nexport default SituationList;\n\nexport const query = graphql`\n  query SituationsList($slug: String!, $langCode: String!) {\n    area(path: { alias: { eq: $slug }, langcode: { eq: $langCode } }) {\n      name\n      relationships {\n        icon {\n          code\n        }\n        situation {\n          id\n          title\n          meta_description\n          path {\n            alias\n          }\n        }\n      }\n    }\n    allSituationAreas: allArea(\n      filter: { langcode: { eq: $langCode } }\n      sort: { fields: name }\n    ) {\n      nodes {\n        ...SituationArea\n      }\n    }\n  }\n`;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  title={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headlineWrapper\":\"headline-module--headlineWrapper--1KseK\",\"headline\":\"headline-module--headline--2EZlD\",\"headlineIcon\":\"headline-module--headlineIcon--3wPWI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"desktop-left-menu-layout-module--wrapper--2FRhZ\",\"hideOnMobile\":\"desktop-left-menu-layout-module--hideOnMobile--3x5nP\",\"main\":\"desktop-left-menu-layout-module--main--2USeX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"measure-list-card-module--listItem--2NERh\",\"buttonWrapper\":\"measure-list-card-module--buttonWrapper--3V2sV\"};","import classNames from 'classnames';\nimport { KeyboardArrowRight } from '@material-ui/icons';\nimport Link from '@/components/link';\nimport ContentIcon from '@/components/content-icon/content-icon';\nimport React, { FC } from 'react';\n\nimport styles from './category-item.module.scss';\n\ntype Props = {\n  id: string;\n  name: string;\n  path: string;\n  iconCode?: string;\n  isActive: boolean;\n};\n\nconst CategoryItem: FC<Props> = ({ name, path, iconCode, isActive }) => {\n  return (\n    <Link\n      to={path}\n      className={classNames(styles.categoryItem, 'py-2', {\n        [styles.isActive]: isActive,\n      })}\n    >\n      {iconCode && (\n        <ContentIcon className={styles.categoryItemIcon} code={iconCode} />\n      )}\n      <span className={styles.categoryItemTitle}>{name}</span>\n      <div className={styles.chevron}>\n        <KeyboardArrowRight style={{ fontSize: 18 }} className=\"color-yellow\" />\n      </div>\n    </Link>\n  );\n};\n\nexport default CategoryItem;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\"\n}), 'KeyboardArrowLeft');","import React, { FC } from 'react';\nimport styles from './category-item-list.module.scss';\nimport CategoryItem from '../category-item/category-item';\nimport Link from '@/components/link';\nimport { KeyboardArrowLeft } from '@material-ui/icons';\nimport ContentIcon from '../content-icon';\nimport { useCurrentLanguage, useTranslation } from '../i18n';\n\ntype Props = {\n  title: string;\n  titleIconCode?: string;\n  linkBack?: {\n    title: string;\n    slug: string;\n  };\n  items: React.ComponentProps<typeof CategoryItem>[];\n};\n\nconst makeFirstWordBold = (sentence: string) =>\n  sentence.split(' ').reduce((acc, curr, i) => {\n    if (i === 0) {\n      return (acc += `<strong>${curr}</strong>`);\n    }\n    return (acc += ' ' + curr);\n  }, '');\n\nconst CategoryItemList: FC<Props> = ({\n  items,\n  title,\n  titleIconCode,\n  linkBack,\n}) => {\n  const currentLanguage = useCurrentLanguage();\n  const { t } = useTranslation();\n  const collator = new Intl.Collator([currentLanguage]);\n  items.sort((a, b) => collator.compare(a.name, b.name));\n\n  const styledTitle = makeFirstWordBold(title);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <h2>\n          {titleIconCode && (\n            <ContentIcon code={titleIconCode} className={styles.icon} />\n          )}\n          <span dangerouslySetInnerHTML={{ __html: styledTitle }} />\n        </h2>\n        {linkBack ? (\n          <Link className={styles.linkBack} to={linkBack.slug}>\n            <KeyboardArrowLeft\n              style={{ fontSize: 18 }}\n              className={styles.chevron}\n            />{' '}\n            <span>\n              {t('back_to')}&nbsp;{linkBack.title}\n            </span>\n          </Link>\n        ) : (\n          <hr />\n        )}\n      </div>\n      {items.map((item, i) => (\n        <CategoryItem key={`${item.iconCode}${i}`} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport default CategoryItemList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { useLocation } from '@reach/router';\nimport { IMeasureAreaFragment } from 'graphql-types';\nimport CategoryItemList from './category-item-list';\nimport { useTranslation } from '../i18n';\n\ninterface IProps {\n  data: IMeasureAreaFragment[];\n}\n\nconst MeasureAreaList: React.FC<IProps> = ({ data }) => {\n  const location = useLocation();\n  const { t } = useTranslation();\n\n  const listItems = data\n    .filter(({ relationships }) => relationships.measure !== null)\n    .map(({ id, name, path, relationships }) => ({\n      id,\n      name,\n      path: path.alias,\n      iconCode: relationships.icon?.code,\n      isActive: path.alias === location.pathname,\n    }));\n  return <CategoryItemList items={listItems} title={t('current_measures')} />;\n};\n\nexport const query = graphql`\n  fragment MeasureArea on measure_type {\n    id\n    name\n    path {\n      alias\n    }\n    relationships {\n      measure {\n        id\n      }\n      icon {\n        code\n      }\n    }\n  }\n`;\n\nexport default MeasureAreaList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { ISituationAreaFragment } from 'graphql-types';\nimport { useLocation } from '@reach/router';\nimport CategoryItemList from './category-item-list';\nimport { useTranslation } from '../i18n';\n\ninterface IProps {\n  data: ISituationAreaFragment[];\n}\n\nconst SituationAreaList: React.FC<IProps> = ({ data }) => {\n  const location = useLocation();\n  const { t } = useTranslation();\n\n  const listItems = data\n    .filter(({ relationships }) => relationships.situation !== null)\n    .map(({ id, name, path, relationships }) => ({\n      id,\n      name,\n      path: path.alias,\n      iconCode: relationships.icon?.code,\n      isActive: path.alias === location.pathname,\n    }));\n  return <CategoryItemList items={listItems} title={t('life_situations')} />;\n};\n\nexport const query = graphql`\n  fragment SituationArea on area {\n    id\n    name\n    path {\n      alias\n    }\n    relationships {\n      situation {\n        id\n      }\n      icon {\n        code\n      }\n    }\n  }\n`;\n\nexport default SituationAreaList;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"categoryItem\":\"category-item-module--categoryItem--3V8HX\",\"chevron\":\"category-item-module--chevron--D9HLp\",\"categoryItemIcon\":\"category-item-module--categoryItemIcon--3wAWD\",\"categoryItemTitle\":\"category-item-module--categoryItemTitle--ErF2o\",\"isActive\":\"category-item-module--isActive--3zXaE\"};","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './variants.module.scss';\n\nimport Link from '@/components/link';\n\nexport type ButtonVariant =\n  | 'contained'\n  | 'outline'\n  | 'yellow'\n  | 'secondary'\n  | 'outline-black'\n  | 'outline-yellow'\n  | 'small-black';\n\nconst getButtonClassName = (variant?: ButtonVariant): string => {\n  return classNames(\n    { btn: variant !== 'small-black' },\n    { 'btn-primary': variant === 'contained' },\n    { 'btn-outline-primary': variant === 'outline' },\n    { 'btn-outline-dark': variant === 'outline-black' },\n    { 'btn-outline-yellow': variant === 'outline-yellow' },\n    { 'btn-yellow': variant === 'yellow' },\n    { 'text-black': variant === 'outline-black' },\n    { 'btn-secondary': variant === 'secondary' },\n    { [styles.btnSmallBlack]: variant === 'small-black' },\n  );\n};\n\ntype IButtonBase = {\n  text?: string;\n  variant?: ButtonVariant;\n  className?: string;\n  icon?: React.ReactNode;\n};\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\n  IButtonBase & { href?: undefined };\n\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> &\n  IButtonBase & { href: string };\n\n// Input/output options\ntype Overload = {\n  (props: ButtonProps): JSX.Element;\n  (props: AnchorProps): JSX.Element;\n};\n\n// Guard to check if href exists in props\nconst hasHref = (props: ButtonProps | AnchorProps): props is AnchorProps =>\n  'href' in props;\n\nconst Button: Overload = (props: ButtonProps | AnchorProps) => {\n  const { className, variant, ...restCommonProps } = props;\n\n  const composedClassName = classNames(getButtonClassName(variant), className);\n\n  if (hasHref(restCommonProps)) {\n    const { href, text, icon, ...rest } = restCommonProps;\n    return (\n      <Link\n        dataTestId=\"button-link\"\n        to={href}\n        className={composedClassName}\n        {...rest}\n      >\n        {text}\n        {icon}\n      </Link>\n    );\n  }\n\n  const { text, icon, ...rest } = restCommonProps as ButtonProps;\n\n  return (\n    <button type=\"button\" className={composedClassName} {...rest}>\n      {text}\n      {icon}\n    </button>\n  );\n};\n\nexport default Button;\n"],"sourceRoot":""}