{"version":3,"sources":["webpack:///./src/components/schema/schema.tsx","webpack:///./src/templates/custom-page/custom-page.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/breadcrumb/breadcrumb.module.scss"],"names":["SchemaComp","canonicalUrl","datePublished","defaultTitle","description","isBlogPost","organization","title","body","url","baseSchema","name","alternateName","schema","itemListElement","position","item","articleBody","headline","publisher","mainEntityOfPage","property","content","type","JSON","page","data","pagePath","htmlLanguage","langcode","className","items","I18n","variant","dangerouslySetInnerHTML","__html","processed","query","getBreadcrumbClasses","classNames","classes","getItemClasses","index","aria-label","key","isNavItem","to","label","module","exports"],"mappings":"6FAAA,uEAkBaA,EAA+B,SAAC,GAUvC,IATJC,EASI,EATJA,aACAC,EAQI,EARJA,cACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,YACAC,EAKI,EALJA,WACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,IAEMC,EAAa,CACjB,CACE,WADF,oBAEE,QAFF,UAGED,IAHF,EAIEE,KAJF,EAKEC,cAAeT,IAIbU,EAASR,EAAU,aAGnB,CACE,WADF,oBAEE,QAFF,iBAGES,gBAAiB,CACf,CACE,QADF,WAEEC,SAFF,EAGEC,KAAM,CACJ,MADI,EAEJL,KAAMJ,MAKd,CACE,WADF,oBAEE,QAFF,cAGEE,IAHF,EAIEE,KAJF,EAKEM,YALF,EAMEL,cANF,EAOEM,SAPF,EAQEd,YARF,EASEe,UAAW,CACT,QADS,eAETV,IAAKH,EAFI,IAGTK,KAAML,EAAaK,MAErBS,iBAAkB,CAChB,QADgB,UAEhB,MAAOnB,GAETC,mBAnCR,EAwCA,OACE,2BACE,0BAAMmB,SAAN,SAAwBC,QAASb,IACjC,0BAAMY,SAAN,UAAyBC,QAAQ,YACjC,0BAAMD,SAAN,WAA0BC,QAASf,IACnC,0BAAMc,SAAN,iBAAgCC,QAASlB,IACzC,4BAAQmB,KAAK,uBAAuBC,eANxC,O,kCC7EF,8IAwDA,UA3CqC,SAAC,GAAa,MAC3CC,EAD2C,EAAXC,KACtC,KAEA,OACE,2BACE,uBACEnB,MAAOkB,EADT,MAEErB,YAAW,UAAEqB,EAAF,gCAFb,gCAGEE,SAAUF,OAHZ,MAIEG,aAAcH,EAAKI,WAErB,uBACE5B,aAAc,uBAAyBwB,OADzC,MAEEvB,cAAeuB,EAFjB,QAGEtB,aAAcsB,EAHhB,MAIEpB,YAJF,EAKED,YAAaqB,EALf,iBAMEjB,KAAMiB,UANR,UAOElB,MAAOkB,EAPT,MAQEhB,IAAK,uBAAyBgB,OARhC,MASEnB,aAAc,CACZG,IADY,iBAEZE,KAAM,2BAGV,uBAAWmB,UAAU,QACnB,yBAAKA,UAAU,QACb,uBACEC,MAAO,CAAC,CAAExB,MAAOyB,YAAT,QAAuBvB,IAAK,KAAOgB,EAD7C,OAEEQ,QAAQ,aAGZ,wBAAIH,UAAU,uCAAuCL,EAPvD,OAQE,6BAASK,UAAU,6BAChBL,WACC,yBAAKS,wBAAyB,CAAEC,OAAQV,UAAaW,iBAU1D,IAAMC,EAAN,c,mJCzCDC,EAAuB,SAACL,GAC5B,OAAOM,IAAW,aAAcC,IAAf,oBAA4C,CAC3D,sBAAmC,YAAZP,KAqC3B,EAjCqC,SAAC,GAAkC,IAAhCF,EAAgC,EAAhCA,MAAgC,IAAzBE,eAAyB,MAAf,SAAe,EAChEQ,EAAiB,SAACC,GAA0B,MAChD,OAAOH,IAAW,mBAAoBC,IAArB,uBACdA,IADc,sBACiBE,IAAUX,SAD3B,EAAjB,KAKF,OACE,yBAAKD,UAAL,cAA6Ba,aAAW,cACtC,wBAAIb,UAAWQ,EAAqBL,IACjCF,EAAA,KAAU,cACT,OACE,wBACEa,IAAG,mBADL,EAEEd,UAAWW,EAAeC,IAxBtB,SAAC1B,GACjB,gBAAQA,EAAD,MAyBM6B,CAAA,GACC,uBACEC,GAAI9B,EADN,IAEEc,UAFF,mBAGEiB,MAAO/B,EAAKT,QAGd,0BAAMuB,UAAU,oBAZtB,W,qBCnCVkB,EAAOC,QAAU,CAAC,oBAAsB,gDAAgD,eAAiB,2CAA2C,qBAAuB","file":"component---src-templates-custom-page-custom-page-tsx-4f16a634da33b19a9dc6.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\n\ninterface IOrganization {\n  url: string;\n  name: string;\n}\ninterface IProps {\n  canonicalUrl: string;\n  body: string;\n  datePublished: string;\n  defaultTitle: string;\n  description: string;\n  isBlogPost: boolean;\n  organization: IOrganization;\n  title: string;\n  url: string;\n}\nexport const SchemaComp: React.FC<IProps> = ({\n  canonicalUrl,\n  datePublished,\n  defaultTitle,\n  description,\n  isBlogPost,\n  organization,\n  title,\n  body,\n  url,\n}) => {\n  const baseSchema = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url,\n      name: title,\n      alternateName: defaultTitle,\n    },\n  ];\n\n  const schema = isBlogPost\n    ? [\n        ...baseSchema,\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': url,\n                name: title,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url,\n          name: title,\n          articleBody: body,\n          alternateName: defaultTitle,\n          headline: title,\n          description,\n          publisher: {\n            '@type': 'Organization',\n            url: organization.url,\n            name: organization.name,\n          },\n          mainEntityOfPage: {\n            '@type': 'WebSite',\n            '@id': canonicalUrl,\n          },\n          datePublished,\n        },\n      ]\n    : baseSchema;\n\n  return (\n    <Helmet>\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n    </Helmet>\n  );\n};\n\nexport default SchemaComp;\n","import { IPage, IQuery } from 'graphql-types';\n\nimport { SchemaComp } from '@/components/schema/schema';\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport React from 'react';\nimport Container from '@/components/container';\nimport { graphql } from 'gatsby';\nimport Breadcrumb from '@/components/breadcrumb';\nimport Layout from '@/layouts/default-layout';\nimport I18n from '@/components/i18n';\n\ninterface IProps {\n  data: IQuery;\n}\n\nconst CustomPage: React.FC<IProps> = ({ data }) => {\n  const page: IPage = data.page;\n\n  return (\n    <Layout>\n      <Seo\n        title={page.title}\n        description={page.meta_description ?? 'Custom page meta description.'}\n        pagePath={page.path.alias}\n        htmlLanguage={page.langcode}\n      />\n      <SchemaComp\n        canonicalUrl={'https://covid.gov.cz' + page.path.alias}\n        datePublished={page.changed}\n        defaultTitle={page.title}\n        isBlogPost\n        description={page.meta_description}\n        body={page.content.processed}\n        title={page.title}\n        url={'https://covid.gov.cz' + page.path.alias}\n        organization={{\n          url: 'https://gov.cz',\n          name: 'Portál veřejné správy',\n        }}\n      />\n      <Container className=\"mb-4\">\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[{ title: I18n('home'), url: '/' }, page.title]}\n            variant=\"inverse\"\n          />\n        </div>\n        <h1 className=\"text-white mt-2 h2 font-weight-bold\">{page.title}</h1>\n        <article className=\"bg-white rounded p-2 mb-1\">\n          {page.content && (\n            <div dangerouslySetInnerHTML={{ __html: page.content.processed }} />\n          )}\n        </article>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default CustomPage;\n\nexport const query = graphql`\n  query($slug: String!, $langCode: String!) {\n    page(path: { alias: { eq: $slug } }) {\n      id\n      content {\n        processed\n      }\n      langcode\n      title\n      changed\n      meta_description\n      path {\n        alias\n      }\n    }\n    translation(langcode: { eq: $langCode }, source: { eq: \"home\" }) {\n      target\n    }\n  }\n`;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  label={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};"],"sourceRoot":""}