{"version":3,"sources":["webpack:///./src/templates/custom-page/custom-page.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/breadcrumb/breadcrumb.module.scss"],"names":["data","pageContext","page","title","description","pagePath","htmlLanguage","langcode","datePublished","dateModified","isBlogPost","body","langCode","breadcrumbItems","I18n","url","className","items","variant","dangerouslySetInnerHTML","__html","processed","query","getBreadcrumbClasses","classNames","classes","getItemClasses","index","aria-label","key","item","isNavItem","to","module","exports"],"mappings":"2FAEA,8IAqDA,UAvCqC,SAAC,GAA0B,MAAxBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACtCC,EAAcF,EAApB,KAEA,OACE,uBAAQC,YAAaA,GACnB,uBACEE,MAAOD,EADT,MAEEE,YAAW,UAAEF,EAAF,gCAFb,gCAGEG,SAAUH,OAHZ,MAIEI,aAAcJ,EAAKK,WAErB,uBACEC,cAAeN,EADjB,QAEEO,aAAcP,EAFhB,QAGEQ,YAHF,EAIEN,YAAaF,EAJf,iBAKES,KAAMT,UALR,UAMEC,MAAOD,EANT,MAOEU,SAAUX,EAPZ,SAQEY,gBAAiB,CAAC,CAAEV,MAAOW,YAAT,QAAuBC,IAAK,KAAOb,EAApC,SAEnB,uBAAWc,UAAU,QACnB,yBAAKA,UAAU,QACb,uBACEC,MAAO,CAAC,CAAEd,MAAOW,YAAT,QAAuBC,IAAK,KAAOb,EAD7C,OAEEgB,QAAQ,aAGZ,wBAAIF,UAAU,uCAAuCd,EAPvD,OAQE,6BAASc,UAAU,6BAChBd,WACC,yBAAKiB,wBAAyB,CAAEC,OAAQlB,UAAamB,iBAU1D,IAAMC,EAAN,a,mJCtCDC,EAAuB,SAACL,GAC5B,OAAOM,IAAW,aAAcC,IAAf,oBAA4C,CAC3D,sBAAmC,YAAZP,KAqC3B,EAjCqC,SAAC,GAAkC,IAAhCD,EAAgC,EAAhCA,MAAgC,IAAzBC,eAAyB,MAAf,SAAe,EAChEQ,EAAiB,SAACC,GAA0B,MAChD,OAAOH,IAAW,mBAAoBC,IAArB,uBACdA,IADc,sBACiBE,IAAUV,SAD3B,EAAjB,KAKF,OACE,yBAAKD,UAAL,cAA6BY,aAAW,cACtC,wBAAIZ,UAAWO,EAAqBL,IACjCD,EAAA,KAAU,cACT,OACE,wBACEY,IAAG,mBADL,EAEEb,UAAWU,EAAeC,IAxBtB,SAACG,GACjB,gBAAQA,EAAD,MAyBMC,CAAA,GACC,uBACEC,GAAIF,EADN,IAEEd,UAFF,mBAGEb,MAAO2B,EAAK3B,QAGd,0BAAMa,UAAU,oBAZtB,W,qBCnCViB,EAAOC,QAAU,CAAC,oBAAsB,gDAAgD,eAAiB,2CAA2C,qBAAuB","file":"component---src-templates-custom-page-custom-page-tsx-e2ea1191adfbd5a14315.js","sourcesContent":["import { IPage, IQuery, ISitePageContext } from '@graphql-types';\n\nimport { SchemaComp } from '@/components/schema/schema';\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport React from 'react';\nimport Container from '@/components/container';\nimport { graphql } from 'gatsby';\nimport Breadcrumb from '@/components/breadcrumb';\nimport Layout from '@/layouts/default-layout';\nimport I18n from '@/components/i18n';\n\ninterface IProps {\n  data: IQuery;\n  pageContext: ISitePageContext;\n}\n\nconst CustomPage: React.FC<IProps> = ({ data, pageContext }) => {\n  const page: IPage = data.page;\n\n  return (\n    <Layout pageContext={pageContext}>\n      <Seo\n        title={page.title}\n        description={page.meta_description ?? 'Custom page meta description.'}\n        pagePath={page.path.alias}\n        htmlLanguage={page.langcode}\n      />\n      <SchemaComp\n        datePublished={page.created}\n        dateModified={page.changed}\n        isBlogPost\n        description={page.meta_description}\n        body={page.content.processed}\n        title={page.title}\n        langCode={pageContext.langCode}\n        breadcrumbItems={[{ title: I18n('home'), url: '/' }, page.title]}\n      />\n      <Container className=\"mb-4\">\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[{ title: I18n('home'), url: '/' }, page.title]}\n            variant=\"inverse\"\n          />\n        </div>\n        <h1 className=\"text-white mt-2 h2 font-weight-bold\">{page.title}</h1>\n        <article className=\"bg-white rounded p-2 mb-1\">\n          {page.content && (\n            <div dangerouslySetInnerHTML={{ __html: page.content.processed }} />\n          )}\n        </article>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default CustomPage;\n\nexport const query = graphql`\n  query($slug: String!, $langCode: String!) {\n    page(path: { alias: { eq: $slug }, langcode: { eq: $langCode } }) {\n      id\n      content {\n        processed\n      }\n      langcode\n      title\n      changed\n      meta_description\n      path {\n        alias\n      }\n    }\n    translation(langcode: { eq: $langCode }, source: { eq: \"home\" }) {\n      target\n    }\n  }\n`;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  title={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};"],"sourceRoot":""}