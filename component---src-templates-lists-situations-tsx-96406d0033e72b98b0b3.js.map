{"version":3,"sources":["webpack:///./src/components/category-item/category-item.tsx","webpack:///./src/components/button/variants.module.scss","webpack:///./src/templates/lists/situations.tsx","webpack:///./src/components/schema/index.tsx","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./node_modules/@material-ui/icons/esm/KeyboardArrowRight.js","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/components/content-icon/content-icon.tsx","webpack:///./src/components/content-box/content-box.module.scss","webpack:///./src/components/content-box/content-box.tsx","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/category-item/category-item.module.scss","webpack:///./src/components/button/button.tsx"],"names":["name","path","iconCode","to","className","styles","code","categoryItemTitle","style","fontSize","module","exports","data","pageContext","nodes","collator","Intl","a","b","title","I18n","description","pagePath","htmlLanguage","langCode","url","isBlogPost","items","variant","noPadding","n","key","query","children","headline","getBreadcrumbClasses","classNames","classes","getItemClasses","index","aria-label","item","isNavItem","label","createElement","d","iconClassName","buttonVariant","buttonText","buttonHref","col","dangerouslySetInnerHTML","__html","contentBoxDescription","href","text","getClass","btn","onClick","disabled","icon","linkTitle","type","dataTestId"],"mappings":"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","file":"component---src-templates-lists-situations-tsx-96406d0033e72b98b0b3.js","sourcesContent":["import { KeyboardArrowRight } from '@material-ui/icons';\nimport Link from '@/components/link';\nimport ContentIcon from '@/components/content-icon/content-icon';\nimport React, { FC } from 'react';\n\nimport styles from './category-item.module.scss';\n\ntype Props = {\n  name: string;\n  path: string;\n  iconCode: string;\n};\n\nconst CategoryItem: FC<Props> = ({ name, path, iconCode }) => {\n  return (\n    <Link to={path} className={styles.categoryItem + ' py-1'}>\n      <ContentIcon className={styles.categoryItemIcon} code={iconCode} />\n      <span className={styles.categoryItemTitle}>{name}</span>\n      <KeyboardArrowRight style={{ fontSize: 16 }} className=\"color-yellow\" />\n    </Link>\n  );\n};\n\nexport default CategoryItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn-small-black\":\"variants-module--btn-small-black--398fP\",\"btnSmallBlack\":\"variants-module--btn-small-black--398fP\"};","import React from 'react';\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport { graphql } from 'gatsby';\nimport ContentBox from '@/components/content-box';\nimport Container from '@/components/container';\nimport { ISituationTypeQueryQuery, ISitePageContext } from 'graphql-types';\nimport Breadcrumb from '@/components/breadcrumb';\nimport Headline from '@/components/headline';\nimport CategoryItem from '@/components/category-item';\nimport Layout from '@/layouts/default-layout';\n\nimport I18n from '@/components/i18n';\nimport SchemaComp from '@/components/schema';\n\ninterface IProps {\n  data: ISituationTypeQueryQuery;\n  pageContext: ISitePageContext;\n}\n\nconst Situations: React.FC<IProps> = ({ data, pageContext }) => {\n  const {\n    allArea: { nodes },\n  } = data;\n\n  const collator = new Intl.Collator([pageContext.langCode]);\n  nodes.sort((a, b) => collator.compare(a.name, b.name));\n\n  // todo: add meta description\n  return (\n    <Layout pageContext={pageContext}>\n      <Seo\n        title={I18n('life_situations')}\n        description={I18n('situations_overview_meta')}\n        pagePath={I18n('slug_situations')}\n        htmlLanguage={pageContext.langCode}\n      />\n      <SchemaComp\n        url={'https://covid.gov.cz' + I18n('slug_situations')}\n        langCode={pageContext.langCode}\n        description={I18n('current_situations_overview_meta')}\n        isBlogPost={false}\n        title={I18n('life_situations')}\n      />\n      <Container>\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[\n              { title: I18n('home'), url: '/' },\n              { title: I18n('life_situations'), url: I18n('slug_situations') },\n            ]}\n            variant=\"inverse\"\n          />\n        </div>\n        <div className=\"mt-3\">\n          <Headline>{I18n('situations_overview')}</Headline>\n        </div>\n        <div className=\"mt-3\">\n          <ContentBox noPadding>\n            {nodes.map(\n              (n) =>\n                n.relationships.situation !== null && (\n                  <CategoryItem\n                    key={n.id}\n                    name={n.name}\n                    path={n.path.alias}\n                    iconCode={n.relationships.icon?.code}\n                  />\n                ),\n            )}\n          </ContentBox>\n        </div>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Situations;\n\nexport const query = graphql`\n  query SituationTypeQuery($langCode: String!) {\n    allArea(filter: { langcode: { eq: $langCode } }, sort: { fields: name }) {\n      nodes {\n        name\n        id\n        path {\n          alias\n        }\n        relationships {\n          situation {\n            id\n          }\n          icon {\n            code\n          }\n        }\n      }\n    }\n    searchingTitle: translation(\n      langcode: { eq: $langCode }\n      source: { eq: \"still_searching_title\" }\n    ) {\n      target\n      langcode\n    }\n    searchingDescription: translation(\n      langcode: { eq: $langCode }\n      source: { eq: \"still_searching_description\" }\n    ) {\n      target\n    }\n    callTitle: translation(\n      langcode: { eq: $langCode }\n      source: { eq: \"call_title\" }\n    ) {\n      target\n    }\n    callDescription: translation(\n      langcode: { eq: $langCode }\n      source: { eq: \"call_description\" }\n    ) {\n      target\n    }\n  }\n`;\n","export { default } from './schema';\n","import React from 'react';\n\nimport styles from './headline.module.scss';\n\nconst Headline: React.FC = ({ children }) => {\n  return <h1 className={styles.headline}>{children}</h1>;\n};\n\nexport default Headline;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  label={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"\n}), 'KeyboardArrowRight');","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"headline-module--headline--2EZlD\"};","import React, { FC } from 'react';\nimport classNames from 'classnames';\n\ninterface IProps {\n  className?: string;\n  code?: string;\n}\n\nconst DEFAULT_CODE = 'folder';\n\nexport const ContentIcon: FC<IProps> = ({ className, code }) => {\n  const iconClassName = classNames(className, 'material-icons');\n  return <i className={iconClassName}>{code || DEFAULT_CODE}</i>;\n};\n\nexport default ContentIcon;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentBoxTitle\":\"content-box-module--contentBoxTitle--3E5Vo\",\"contentBoxDescription\":\"content-box-module--contentBoxDescription--O2FI4\",\"contentBox\":\"content-box-module--contentBox--3WK0J\",\"contentBoxNoPadding\":\"content-box-module--contentBoxNoPadding--2vKlZ\",\"contentBox--white\":\"content-box-module--contentBox--white--2fBcG\",\"contentBoxWhite\":\"content-box-module--contentBox--white--2fBcG\",\"contentBox--blue\":\"content-box-module--contentBox--blue--243gT\",\"contentBoxBlue\":\"content-box-module--contentBox--blue--243gT\",\"content-box-btn\":\"content-box-module--content-box-btn--281FR\",\"contentBoxBtn\":\"content-box-module--content-box-btn--281FR\",\"content-box-btn--blue\":\"content-box-module--content-box-btn--blue--22dPm\",\"contentBoxBtnBlue\":\"content-box-module--content-box-btn--blue--22dPm\"};","import React from 'react';\nimport classNames from 'classnames';\nimport Button, { ButtonVariant } from '@/components/button';\nimport Col from '@/components/col';\n\nimport styles from './content-box.module.scss';\n\ninterface Props {\n  title?: string;\n  description?: string;\n  boldedTitleCount?: number;\n  buttonVariant?: ButtonVariant;\n  buttonText?: string;\n  buttonHref?: string;\n  variant?: 'white' | 'blue';\n  noPadding?: boolean;\n}\n\nconst ContentBox: React.FC<Props> = ({\n  children,\n  title,\n  description,\n  buttonVariant,\n  buttonText,\n  buttonHref,\n  variant = '',\n  noPadding,\n}) => {\n  return (\n    // contentBox--white\n    // contentBox--blue\n    <div\n      className={classNames(\n        styles.contentBox,\n        styles[`contentBox--${variant}`],\n        noPadding && styles.contentBoxNoPadding,\n        'row',\n      )}\n    >\n      <Col col={12}>\n        {title && (\n          <h2\n            className={styles.contentBoxTitle}\n            dangerouslySetInnerHTML={{\n              __html: title,\n            }}\n          />\n        )}\n        {description && (\n          <p className={styles.contentBoxDescription}>{description}</p>\n        )}\n        {children}\n        {buttonText && (\n          <Button\n            href={buttonHref}\n            variant={buttonVariant}\n            text={buttonText}\n            className={classNames(styles.contentBoxBtn, {\n              [styles.contentBoxBtnBlue]: variant === 'white',\n            })}\n          />\n        )}\n      </Col>\n    </div>\n  );\n};\n\nexport default ContentBox;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"categoryItem\":\"category-item-module--categoryItem--3V8HX\",\"categoryItemIcon\":\"category-item-module--categoryItemIcon--3wAWD\",\"categoryItemTitle\":\"category-item-module--categoryItemTitle--ErF2o\"};","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './variants.module.scss';\n\nimport Link from '@/components/link';\n\nconst getClass = (variant: ButtonVariant, additionalClass?: string): string => {\n  return classNames(\n    { btn: variant !== 'small-black' },\n    { 'btn-primary': variant === 'contained' },\n    { 'btn-outline-primary': variant === 'outline' },\n    { 'btn-outline-dark': variant === 'outline-black' },\n    { 'btn-outline-yellow': variant === 'outline-yellow' },\n    { 'btn-yellow': variant === 'yellow' },\n    { 'text-black': variant === 'outline-black' },\n    { 'btn-secondary': variant === 'secondary' },\n    { [styles.btnSmallBlack]: variant === 'small-black' },\n    { [additionalClass]: additionalClass },\n  );\n};\n\nexport type ButtonVariant =\n  | 'contained'\n  | 'outline'\n  | 'yellow'\n  | 'secondary'\n  | 'outline-black'\n  | 'outline-yellow'\n  | 'small-black';\n\ninterface IProps {\n  text?: string;\n  variant?: ButtonVariant;\n  className?: string;\n  onClick?: () => void;\n  href?: string;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  linkTitle?: string;\n}\n\nconst Button: React.FC<IProps> = ({\n  variant,\n  onClick,\n  text,\n  href = '',\n  className,\n  disabled = false,\n  icon,\n  linkTitle = '',\n}) => {\n  if (href !== '' && !disabled) {\n    return (\n      <Link to={href} label={linkTitle} dataTestId=\"button-link\">\n        <button\n          type=\"button\"\n          className={getClass(variant, className)}\n          onClick={onClick || null}\n          disabled={disabled}\n        >\n          {text}\n          {icon}\n        </button>\n      </Link>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={getClass(variant, className)}\n      onClick={onClick || null}\n      disabled={disabled}\n    >\n      {text}\n      {icon}\n    </button>\n  );\n};\n\nexport default Button;\n"],"sourceRoot":""}